<<<<<<< HEAD
import React, { Component } from 'react'
import { FormattedMessage, injectIntl } from 'react-intl'
import api from '~base/api'
=======
import React, { Component } from 'react';

import api from '~base/api';
>>>>>>> release

import {
  BaseForm,
  TextWidget,
  TextareaWidget,
} from '~base/components/base-form';

<<<<<<< HEAD
=======
const schema = {
  type: 'object',
  title: '',
  required: ['name'],
  properties: {
    name: { type: 'string', title: 'Nombre' },
    description: { type: 'string', title: 'DescripciÃ³n' },
  },
};

>>>>>>> release
const uiSchema = {
  name: { 'ui:widget': TextWidget },
  description: { 'ui:widget': TextareaWidget, 'ui:rows': 3 },
};

class CreateDatsetForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      formData: this.props.initialState,
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
    };
  }

<<<<<<< HEAD
  formatTitle (id) {
    return this.props.intl.formatMessage({ id: id })
  }

  errorHandler (e) {}
=======
  errorHandler(e) {}
>>>>>>> release

  changeHandler({ formData }) {
    this.setState({
      formData,
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
    });
  }

  clearState() {
    this.setState({
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
      formData: this.props.initialState,
    });
  }

  async submitHandler({ formData }) {
    if (this.props.submitHandler) this.props.submitHandler(formData);
    try {
      var data = await api.post(this.props.url, formData);
      await this.props.load();
      this.clearState();
      this.setState({ ...this.state, apiCallMessage: 'message is-success' });
      if (this.props.finishUp) this.props.finishUp(data.data);
      return;
    } catch (e) {
      if (this.props.errorHandler) this.props.errorHandler(e);
      return this.setState({
        ...this.state,
        error: e.message,
        apiCallErrorMessage: 'message is-danger',
      });
    }
  }

  render() {
    var error;
    if (this.state.error) {
      error = <div>Error: {this.state.error}</div>;
    }

    const schema = {
      type: 'object',
      title: '',
      required: [
        'name'
      ],
      properties: {
        name: { type: 'string', title: this.formatTitle('datasets.name') },
        description: { type: 'string', title: this.formatTitle('datasets.description') }
      }
    }

    return (
      <div>
        <BaseForm
          schema={schema}
          uiSchema={uiSchema}
          formData={this.state.formData}
          onChange={e => {
            this.changeHandler(e);
          }}
          onSubmit={e => {
            this.submitHandler(e);
          }}
          onError={e => {
            this.errorHandler(e);
          }}
        >
          <div className={this.state.apiCallMessage}>
<<<<<<< HEAD
            <div className='message-body is-size-7 has-text-centered'>
              <FormattedMessage
                id='datasets.savedMsg'
                defaultMessage={`Los datos se han guardado correctamente`}
              />
=======
            <div className="message-body is-size-7 has-text-centered">
              Los datos se han guardado correctamente
>>>>>>> release
            </div>
          </div>

          <div className={this.state.apiCallErrorMessage}>
            <div className="message-body is-size-7 has-text-centered">
              {error}
            </div>
          </div>
          {this.props.children}
        </BaseForm>
      </div>
    );
  }
}

<<<<<<< HEAD
export default injectIntl(CreateDatsetForm)
=======
export default CreateDatsetForm;
>>>>>>> release
