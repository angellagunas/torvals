<<<<<<< HEAD
import React, { Component } from 'react'
import { FormattedMessage } from 'react-intl'
import api from '~base/api'
=======
import React, { Component } from 'react';
import api from '~base/api';
>>>>>>> release

import { BaseForm, TextWidget } from '~base/components/base-form';

const schema = {
  type: 'object',
  title: '',
  required: ['name', 'externalId'],
  properties: {
<<<<<<< HEAD
    //TODO: translate
    name: {type: 'string', title: 'Nombre'},
    externalId: {type: 'string', title: 'Id Externo'}
  }
}
=======
    name: { type: 'string', title: 'Nombre' },
    externalId: { type: 'string', title: 'Id Externo' },
  },
};
>>>>>>> release

const uiSchema = {
  name: { 'ui:widget': TextWidget },
  externalId: { 'ui:widget': TextWidget },
};

class EditChannel extends Component {
  constructor(props) {
    super(props);
    this.state = {
      formData: this.props.initialState,
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
    };
  }

  changeHandler({ formData }) {
    this.setState({
      formData,
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
    });
  }

  clearState() {
    this.setState({
      apiCallMessage: 'is-hidden',
      apiCallErrorMessage: 'is-hidden',
      formData: this.props.initialState,
    });
  }

  async submitHandler({ formData }) {
    formData.isDefault = undefined;
    if (this.props.submitHandler) this.props.submitHandler(formData);
    try {
      var data = await api.post(this.props.url, formData);
      if (this.props.load) {
        await this.props.load();
      }
      this.clearState();
      this.setState({ ...this.state, apiCallMessage: 'message is-success' });
      if (this.props.finishUp) this.props.finishUp(data.data);
    } catch (e) {
      if (this.props.errorHandler) this.props.errorHandler(e);
      return this.setState({
        ...this.state,
        error: e.message,
        apiCallErrorMessage: 'message is-danger',
      });
    }
  }

  render() {
    var error;
    if (this.state.error) {
      error = <div>Error: {this.state.error}</div>;
    }

<<<<<<< HEAD
    return (<div>
      <BaseForm schema={schema}
        uiSchema={uiSchema}
        formData={this.state.formData}
        onChange={(e) => { this.changeHandler(e) }}
        onSubmit={(e) => { this.submitHandler(e) }}>
        <div className={this.state.apiCallMessage}>
          <div className='message-body is-size-7 has-text-centered'>
            <FormattedMessage
              id="datasets.savedMsg"
              defaultMessage={`Los datos se han guardado correctamente`}
            />
=======
    return (
      <div>
        <BaseForm
          schema={schema}
          uiSchema={uiSchema}
          formData={this.state.formData}
          onChange={e => {
            this.changeHandler(e);
          }}
          onSubmit={e => {
            this.submitHandler(e);
          }}
        >
          <div className={this.state.apiCallMessage}>
            <div className="message-body is-size-7 has-text-centered">
              Los datos se han guardado correctamente
            </div>
>>>>>>> release
          </div>
          <div className={this.state.apiCallErrorMessage}>
            <div className="message-body is-size-7 has-text-centered">
              {error}
            </div>
          </div>
          {this.props.children}
        </BaseForm>
      </div>
    );
  }
}

export default EditChannel;
