<<<<<<< HEAD
import React, { Component } from 'react'
import { FormattedMessage } from 'react-intl'
import api from '~base/api'
import moment from 'moment'
import Link from '~base/router/link'
import { testRoles } from '~base/tools'
import FontAwesome from 'react-fontawesome'

import Page from '~base/page'
import {loggedIn, verifyRole} from '~base/middlewares/'
import Loader from '~base/components/spinner'
import SalesCenterForm from './create-form'
import Multiselect from '~base/components/base-multiselect'
import DeleteButton from '~base/components/base-deleteButton'
import Breadcrumb from '~base/components/base-breadcrumb'
import NotFound from '~base/components/not-found'
=======
import React, { Component } from 'react';
import api from '~base/api';
import moment from 'moment';
import Link from '~base/router/link';
import { testRoles } from '~base/tools';
import FontAwesome from 'react-fontawesome';

import Page from '~base/page';
import { loggedIn, verifyRole } from '~base/middlewares/';
import Loader from '~base/components/spinner';
import SalesCenterForm from './create-form';
import Multiselect from '~base/components/base-multiselect';
import DeleteButton from '~base/components/base-deleteButton';
import Breadcrumb from '~base/components/base-breadcrumb';
import NotFound from '~base/components/not-found';
>>>>>>> release

class SalesCenterDetail extends Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: true,
      loaded: false,
      salesCenter: {},
      groups: [],
      roles: 'admin, orgadmin, analyst, manager-level-3',
      canEdit: false,
      selectedGroups: [],
      saving: false,
      saved: false,
      isLoading: '',
    };
  }

  componentWillMount() {
    this.load();
    this.loadGroups();
    this.setState({ canEdit: testRoles(this.state.roles) });
  }

  async load() {
    var url = '/app/salesCenters/' + this.props.match.params.uuid;
    try {
      const body = await api.get(url);

      this.setState({
        loading: false,
        loaded: true,
        salesCenter: body.data,
        selectedGroups: [...body.data.groups],
      });
    } catch (e) {
      await this.setState({
        loading: false,
        loaded: true,
        notFound: true,
      });
    }
  }

  async loadGroups() {
    var url = '/app/groups/';
    const body = await api.get(url, {
      start: 0,
      limit: 0,
    });

    this.setState({
      groups: body.data,
    });
  }

  async availableGroupOnClick(uuid) {
    this.setState({
      saving: true,
    });

    var selected = this.state.selectedGroups;
    var group = this.state.groups.find(item => {
      return item.uuid === uuid;
    });

    if (
      selected.findIndex(item => {
        return item.uuid === uuid;
      }) !== -1
    ) {
      return;
    }

    selected.push(group);

    this.setState({
      selectedGroups: selected,
    });

    var url =
      '/app/salesCenters/' + this.props.match.params.uuid + '/add/group';
    await api.post(url, {
      group: uuid,
    });

    setTimeout(() => {
      this.setState({
        saving: false,
        saved: true,
      });
    }, 300);
  }

  async assignedGroupOnClick(uuid) {
    this.setState({
      saving: true,
    });

    var index = this.state.selectedGroups.findIndex(item => {
      return item.uuid === uuid;
    });
    var selected = this.state.selectedGroups;

    if (index === -1) {
      return;
    }

    selected.splice(index, 1);

    this.setState({
      selectedGroups: selected,
    });

    var url =
      '/app/salesCenters/' + this.props.match.params.uuid + '/remove/group';
    await api.post(url, {
      group: uuid,
    });

    setTimeout(() => {
      this.setState({
        saving: false,
        saved: true,
      });
    }, 300);
  }

  async deleteObject() {
    var url = '/app/salesCenters/' + this.props.match.params.uuid;
    await api.del(url);
    this.props.history.push('/catalogs/salesCenters');
  }

  getColumns() {
    return [
      {
<<<<<<< HEAD
        'title': 'Estado', //TODO: translate
        'property': 'status',
        'default': 'N/A',
        'sortable': true
      },
      {
        'title': 'Fecha Inicial', //TODO: translate
        'property': 'dateStart',
        'default': 'N/A',
        'sortable': true,
        formatter: (row) => {
          return (
            moment.utc(row.dateStart).local().format('DD/MM/YYYY')
          )
        }
      },
      {
        'title': 'Fecha Final', //TODO: translate
        'property': 'dateEnd',
        'default': 'N/A',
        'sortable': true,
        formatter: (row) => {
          return (
            moment.utc(row.dateEnd).local().format('DD/MM/YYYY')
          )
        }
      },
      {
        'title': 'Acciones', //TODO: translate
        formatter: (row) => {
=======
        title: 'Estado',
        property: 'status',
        default: 'N/A',
        sortable: true,
      },
      {
        title: 'Fecha Inicial',
        property: 'dateStart',
        default: 'N/A',
        sortable: true,
        formatter: row => {
          return moment
            .utc(row.dateStart)
            .local()
            .format('DD/MM/YYYY');
        },
      },
      {
        title: 'Fecha Final',
        property: 'dateEnd',
        default: 'N/A',
        sortable: true,
        formatter: row => {
          return moment
            .utc(row.dateEnd)
            .local()
            .format('DD/MM/YYYY');
        },
      },
      {
        title: 'Acciones',
        formatter: row => {
>>>>>>> release
          if (testRoles('manager-level-2, consultor-level-3')) {
            return (
              <Link className="button is-primary" to={'/forecasts/' + row.uuid}>
                <span className="icon is-small" title="Visualizar">
                  <i className="fa fa-eye" />
                </span>
              </Link>
            );
          } else {
            return (
              <Link className="button is-primary" to={'/forecasts/' + row.uuid}>
                <span className="icon is-small" title="Editar">
                  <i className="fa fa-pencil" />
                </span>
              </Link>
            );
          }
        },
      },
    ];
  }

  getSavingMessage() {
    let { saving, saved } = this.state;

    if (saving) {
      return (
<<<<<<< HEAD
        <p className='card-header-title' style={{fontWeight: '200', color: 'grey'}}>
          <FormattedMessage
            id="salesCenter.saving"
            defaultMessage={`saving`}
          /> <span style={{paddingLeft: '5px'}}><FontAwesome className='fa-spin' name='spinner' /></span>
=======
        <p
          className="card-header-title"
          style={{ fontWeight: '200', color: 'grey' }}
        >
          Guardando{' '}
          <span style={{ paddingLeft: '5px' }}>
            <FontAwesome className="fa-spin" name="spinner" />
          </span>
>>>>>>> release
        </p>
      );
    }

    if (saved) {
      if (this.savedTimeout) {
        clearTimeout(this.savedTimeout);
      }

      this.savedTimeout = setTimeout(() => {
        this.setState({
          saved: false,
        });
      }, 500);

      return (
<<<<<<< HEAD
        <p className='card-header-title' style={{fontWeight: '200', color: 'grey'}}>
          <FormattedMessage
            id="salesCenter.saved"
            defaultMessage={`Guardado`}
          />
=======
        <p
          className="card-header-title"
          style={{ fontWeight: '200', color: 'grey' }}
        >
          Guardado
>>>>>>> release
        </p>
      );
    }
  }

  submitHandler() {
    this.setState({ isLoading: ' is-loading' });
  }

  errorHandler() {
    this.setState({ isLoading: '' });
  }

  finishUpHandler() {
    this.setState({ isLoading: '' });
  }

  render() {
    if (this.state.notFound) {
<<<<<<< HEAD
      //TODO: translate
      return <NotFound msg='este centro de venta' />
=======
      return <NotFound msg="este centro de venta" />;
>>>>>>> release
    }

    let { loaded, canEdit } = this.state;
    if (!loaded) {
      return <Loader />;
    }

    const availableList = this.state.groups.filter(item => {
      return (
        this.state.selectedGroups.findIndex(group => {
          return group.uuid === item.uuid;
        }) === -1
      );
    });

    return (
      <div className="detail-page">
        <div className="section-header">
          <h2>{this.state.salesCenter.name}</h2>
        </div>

        <div className="level">
          <div className="level-left">
            <div className="level-item">
              <Breadcrumb
                path={[
                  {
                    path: '/',
<<<<<<< HEAD
                    label: 'Inicio', //TODO: translate
                    current: false
                  },
                  {
                    path: '/catalogs/salesCenters',
                    label: 'Centros de venta', //TODO: translate
                    current: false
=======
                    label: 'Inicio',
                    current: false,
                  },
                  {
                    path: '/catalogs/salesCenters',
                    label: 'Centros de venta',
                    current: false,
>>>>>>> release
                  },
                  {
                    path: '/catalogs/salesCenters/',
                    label: this.state.salesCenter.name,
                    current: true,
                  },
                ]}
                align="left"
              />
            </div>
          </div>
          <div className="level-right">
            <div className="level-item">
              {canEdit && (
                <DeleteButton
<<<<<<< HEAD
                  titleButton={'Eliminar'} //TODO: translate
                  objectName='Centro de ventas'
                  objectDelete={this.deleteObject.bind(this)}
                  //TODO: translate
                  message={`Â¿Deseas eliminar el centro de ventas ${this.state.salesCenter.name}?`}
=======
                  titleButton={'Eliminar'}
                  objectName="Centro de ventas"
                  objectDelete={this.deleteObject.bind(this)}
                  message={`Â¿Deseas eliminar el centro de ventas ${
                    this.state.salesCenter.name
                  }?`}
>>>>>>> release
                />
              )}
            </div>
          </div>
        </div>

<<<<<<< HEAD
        <div className='section is-paddingless-top pad-sides'>

          <div className='columns'>
            <div className='column'>
              <div className='card'>
                <header className='card-header'>
                  <p className='card-header-title'>
                    <FormattedMessage
                      id="salesCenter.detail"
                      defaultMessage={`Detalle`}
                    />
                  </p>
=======
        <div className="section is-paddingless-top pad-sides">
          <div className="columns">
            <div className="column">
              <div className="card">
                <header className="card-header">
                  <p className="card-header-title">Detalle</p>
>>>>>>> release
                </header>
                <div className="card-content">
                  <div className="columns">
                    <div className="column">
                      <SalesCenterForm
                        baseUrl="/app/salesCenters"
                        url={
                          '/app/salesCenters/' + this.props.match.params.uuid
                        }
                        initialState={this.state.salesCenter}
                        load={this.load.bind(this)}
                        canEdit={canEdit}
                        submitHandler={data => this.submitHandler(data)}
                        errorHandler={data => this.errorHandler(data)}
                        finishUp={data => this.finishUpHandler(data)}
                      >
                        <div className="field is-grouped">
                          <div className="control">
                            <button
                              className={
                                'button is-primary ' + this.state.isLoading
                              }
                              disabled={!!this.state.isLoading}
<<<<<<< HEAD
                              type='submit'
                            >
                              <FormattedMessage
                                id="salesCenter.btnSave"
                                defaultMessage={`Guardar`}
                              />
=======
                              type="submit"
                            >
                              Guardar
>>>>>>> release
                            </button>
                          </div>
                        </div>
                      </SalesCenterForm>
                    </div>
                  </div>
                </div>
              </div>
            </div>

<<<<<<< HEAD
            <div className='column'>
              <div className='card'>
                <header className='card-header'>
                  <p className='card-header-title'>
                    <FormattedMessage
                      id="salesCenter.groups"
                      defaultMessage={`Grupos`}
                    />
                  </p>
=======
            <div className="column">
              <div className="card">
                <header className="card-header">
                  <p className="card-header-title">Grupos</p>
>>>>>>> release
                </header>
                <div className="card-content">
                  <Multiselect
<<<<<<< HEAD
                    //TODO: translate
                    availableTitle='Disponible'
                    assignedTitle='Asignado'
=======
                    availableTitle="Disponible"
                    assignedTitle="Asignado"
>>>>>>> release
                    assignedList={this.state.selectedGroups}
                    availableList={availableList}
                    dataFormatter={item => {
                      return item.name;
                    }}
                    availableClickHandler={this.availableGroupOnClick.bind(
                      this
                    )}
                    assignedClickHandler={this.assignedGroupOnClick.bind(this)}
                    disabled={!canEdit}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

export default Page({
  path: '/catalogs/salesCenters/:uuid',
  title: 'Sales center detail', //TODO: translate
  exact: true,
  roles:
    'analyst, orgadmin, admin, consultor-level-2, manager-level-2, consultor-level-3, manager-level-3',
  validate: [loggedIn, verifyRole],
  component: SalesCenterDetail,
});
