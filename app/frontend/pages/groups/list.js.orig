import React from 'react';
import Link from '~base/router/link';
import moment from 'moment';
import api from '~base/api';
import tree from '~core/tree';
import ListPage from '~base/list-page';
import { loggedIn, verifyRole } from '~base/middlewares/';
import CreateGroup from './create';
import CreateGroupNoModal from './create-no-modal';
import DeleteButton from '~base/components/base-deleteButton';
import GroupUsers from './group-users';

export default ListPage({
  path: '/manage/groups',
  title: 'Grupos', //TODO: translate
  icon: 'users',
  exact: true,
  roles:
    'admin, orgadmin, analyst, consultor-level-3, consultor-level-2, manager-level-2, manager-level-3',
  canCreate: 'admin, orgadmin, analyst, manager-level-2, manager-level-3',
  validate: [loggedIn, verifyRole],
  titleSingular: 'Grupo', //TODO: translate
  create: true,
  createComponent: CreateGroup,
  breadcrumbs: true,
  breadcrumbConfig: {
    path: [
      {
        path: '/',
<<<<<<< HEAD
        label: 'Inicio', //TODO: translate
        current: false
      },
      {
        path: '/manage/groups/',
        label: 'Grupos', //TODO: translate
        current: true
      }
=======
        label: 'Inicio',
        current: false,
      },
      {
        path: '/manage/groups/',
        label: 'Grupos',
        current: true,
      },
>>>>>>> release
    ],
    align: 'left',
  },
  sidePanel: false,
  sidePanelIcon: 'plus',
  sidePanelComponent: CreateGroupNoModal,
  baseUrl: '/app/groups',
  branchName: 'groups',
  detailUrl: '/manage/groups/',
  filters: true,
  schema: {
    type: 'object',
    required: [],
<<<<<<< HEAD
    properties: { //TODO: translate
      general: {type: 'text', title: 'Buscar'}
    }
=======
    properties: {
      general: { type: 'text', title: 'Buscar' },
    },
>>>>>>> release
  },
  uiSchema: {
    general: { 'ui:widget': 'SearchFilter' },
  },
  getColumns: () => {
    return [
      {
<<<<<<< HEAD
        'title': 'Nombre', //TODO: translate
        'property': 'name',
        'default': 'N/A',
        'sortable': true,
        formatter: (row) => {
          return (
            <Link to={'/manage/groups/' + row.uuid}>
              {row.name}
            </Link>
          )
        }
      },
      {
        'title': 'Creado', //TODO: translate
        'property': 'dateCreated',
        'default': 'N/A',
        'sortable': true,
        formatter: (row) => {
          return (
            moment.utc(row.dateCreated).local().format('DD/MM/YYYY hh:mm a')
          )
        }
      },
      {
        'title': 'Miembros', //TODO: translate
        'property': 'users',
        'default': '0',
        'sortable': true,
        formatter: (row) => {
=======
        title: 'Nombre',
        property: 'name',
        default: 'N/A',
        sortable: true,
        formatter: row => {
          return <Link to={'/manage/groups/' + row.uuid}>{row.name}</Link>;
        },
      },
      {
        title: 'Creado',
        property: 'dateCreated',
        default: 'N/A',
        sortable: true,
        formatter: row => {
          return moment
            .utc(row.dateCreated)
            .local()
            .format('DD/MM/YYYY hh:mm a');
        },
      },
      {
        title: 'Miembros',
        property: 'users',
        default: '0',
        sortable: true,
        formatter: row => {
>>>>>>> release
          return (
            <div>
              {row.users.length}
              {row.users.length > 0 && <GroupUsers group={row} />}
            </div>
          );
        },
      },
      {
<<<<<<< HEAD
        'title': 'Acciones', //TODO: translate
        formatter: (row) => {
          const deleteObject = async function () {
            var url = '/app/groups/' + row.uuid
            await api.del(url)
=======
        title: 'Acciones',
        formatter: row => {
          const deleteObject = async function() {
            var url = '/app/groups/' + row.uuid;
            await api.del(url);
>>>>>>> release

            const cursor = tree.get('groups');
            const users = await api.get('/app/groups/');

            tree.set('groups', {
              page: cursor.page,
              totalItems: users.total,
              items: users.data,
              pageLength: cursor.pageLength,
            });
            tree.commit();
          };

          var currentRole = tree.get('user').currentRole.slug;
          var deleteButton;
          if (
            currentRole !== 'consultor-level-3' &&
            currentRole !== 'consultor-level-2'
          ) {
            deleteButton = (
              <div className="control">
                <DeleteButton
                  iconOnly
<<<<<<< HEAD
                  icon='fa fa-trash'
                  objectName='Grupo'
                  objectDelete={deleteObject} //TODO: translate
                  message={`¿Está seguro de querer eliminar el grupo ${row.name} ?`}
=======
                  icon="fa fa-trash"
                  objectName="Grupo"
                  objectDelete={deleteObject}
                  message={`¿Está seguro de querer eliminar el grupo ${
                    row.name
                  } ?`}
>>>>>>> release
                />
              </div>
            );
          }

          return (
            <div className="field is-grouped">
              <div className="control">
                <Link
                  className="button is-primary"
                  to={'/manage/groups/' + row.uuid}
                >
                  <span className="icon is-small" title="Editar">
                    <i
                      className={
                        currentRole === 'consultor-level-3' ||
                        currentRole === 'consultor-level-2'
                          ? 'fa fa-eye'
                          : 'fa fa-pencil'
                      }
                    />
                  </span>
                </Link>
              </div>
              {deleteButton}
            </div>
          );
        },
      },
    ];
  },
});
