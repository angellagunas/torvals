<<<<<<< HEAD
import React, { Component } from 'react'
import { FormattedMessage, injectIntl } from 'react-intl'
import { branch } from 'baobab-react/higher-order'
import PropTypes from 'baobab-react/prop-types'
import Link from '~base/router/link'
import api from '~base/api'
import Loader from '~base/components/spinner'

import Page from '~base/page'
import {loggedIn, verifyRole} from '~base/middlewares/'
import { BranchedPaginatedTable } from '~base/components/base-paginated-table'
import GroupForm from './form'
import DeleteButton from '~base/components/base-deleteButton'
import CreateUser from '../users/create'
import BaseModal from '~base/components/base-modal'
import tree from '~core/tree'
import Breadcrumb from '~base/components/base-breadcrumb'
import NotFound from '~base/components/not-found'

var currentRole
=======
import React, { Component } from 'react';
import { branch } from 'baobab-react/higher-order';
import PropTypes from 'baobab-react/prop-types';
import Link from '~base/router/link';
import api from '~base/api';
import Loader from '~base/components/spinner';

import Page from '~base/page';
import { loggedIn, verifyRole } from '~base/middlewares/';
import { BranchedPaginatedTable } from '~base/components/base-paginated-table';
import GroupForm from './form';
import DeleteButton from '~base/components/base-deleteButton';
import CreateUser from '../users/create';
import BaseModal from '~base/components/base-modal';
import tree from '~core/tree';
import Breadcrumb from '~base/components/base-breadcrumb';
import NotFound from '~base/components/not-found';

var currentRole;
>>>>>>> release

class GroupDetail extends Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: true,
      loaded: false,
      group: {},
      isLoading: '',
    };
    this.rules = tree.get('rule');

    currentRole = tree.get('user').currentRole.slug;
  }

  componentWillMount() {
    tree.set('groups', {
      page: 1,
      totalItems: 0,
      items: [],
      pageLength: 10,
    });
    tree.commit();
    this.getChannels();
    this.getSalesCenters();
    this.load();
  }

<<<<<<< HEAD
  formatTitle (id) {
    return this.props.intl.formatMessage({ id: id })
  }

  findCatalogName = (name) => {
    let find = ''
=======
  findCatalogName = name => {
    let find = '';
>>>>>>> release
    this.rules.catalogs.map(item => {
      if (item.slug === name) {
        find = item.name;
      }
    });
    return find;
  };

  async load() {
    var url = '/app/groups/' + this.props.group.uuid;

    try {
      const body = await api.get(url);

      this.setState({
        loading: false,
        loaded: true,
        group: body.data,
        catalogItems: _(body.data.catalogItems)
          .groupBy(x => x.type)
          .map((value, key) => ({
            type: this.findCatalogName(key),
<<<<<<< HEAD
            slug: key,
            objects: value
=======
            objects: value,
>>>>>>> release
          }))
          .value(),
      });
    } catch (e) {
      await this.setState({
        loading: false,
        loaded: true,
        notFound: true,
      });
    }
  }

  getColumns() {
    return [
      {
<<<<<<< HEAD
        'title': this.formatTitle('user.formName'),
        'property': 'name',
        'default': 'N/A',
        'sortable': true
      },
      {
        'title': this.formatTitle('user.formEmail'),
        'property': 'email',
        'default': 'N/A',
        'sortable': true
      }
    ]
=======
        title: 'Nombre',
        property: 'name',
        default: 'N/A',
        sortable: true,
      },
      {
        title: 'Email',
        property: 'email',
        default: 'N/A',
        sortable: true,
      },
    ];
>>>>>>> release
  }

  showModal() {
    this.setState({
      className: ' is-active',
    });
  }

  hideModal() {
    this.setState({
      className: '',
    });
  }

  finishUp(object) {
    this.setState({
      className: '',
    });
  }

  async deleteObject() {
    var url = '/app/groups/' + this.props.group.uuid;
    await api.del(url);
    this.props.selectGroup();
  }

  async loadGroupUsers() {
    const body = await api.get('/app/users', {
      start: 0,
      limit: 0,
      group: this.props.group.uuid,
    });

    this.cursor = tree.select('users');

    this.cursor.set({
      page: 1,
      totalItems: body.total,
      items: body.data,
      pageLength: this.cursor.get('pageLength') || 10,
    });
    tree.commit();
  }

  async addToGroup(user) {
    var url = '/app/users/' + user + '/add/group';
    await api.post(url, {
      group: this.props.group.uuid,
    });

    this.updateUsersToAsign();
    this.loadGroupUsers();
    this.hideModalList();
  }

  async updateUsersToAsign() {
    const cursor = tree.get('usersAsign');
    const updateUsers = await api.get('/app/users', {
      groupAsign: this.props.group.uuid,
      organization: this.state.group.organization.uuid,
    });

    tree.set('usersAsign', {
      page: cursor.page,
      totalItems: updateUsers.total,
      items: updateUsers.data,
      pageLength: cursor.pageLength,
    });
    tree.commit();
  }

  getColumnsUsersToAsign() {
    return [
      {
<<<<<<< HEAD
        'title': this.formatTitle('user.formName'),
        'property': 'name',
        'default': 'N/A',
        'sortable': true
      },
      {
        'title': this.formatTitle('user.formEmail'),
        'property': 'email',
        'default': 'N/A',
        'sortable': true
      },
      {
        'title': this.formatTitle('groups.tableActions'),
        formatter: (row) => {
          return (
            <button className='button' onClick={e => { this.addToGroup(row.uuid) }}>
              <FormattedMessage
                id="groups.btnAdd"
                defaultMessage={`Agregar`}
              />
=======
        title: 'Nombre',
        property: 'name',
        default: 'N/A',
        sortable: true,
      },
      {
        title: 'Email',
        property: 'email',
        default: 'N/A',
        sortable: true,
      },
      {
        title: 'Acciones',
        formatter: row => {
          return (
            <button
              className="button"
              onClick={e => {
                this.addToGroup(row.uuid);
              }}
            >
              Agregar
>>>>>>> release
            </button>
          );
        },
      },
    ];
  }

  showModalList() {
    this.setState({
      classNameList: ' is-active',
    });
  }

  hideModalList() {
    this.setState({
      classNameList: '',
    });
  }

  finishUpList(object) {
    this.setState({
      classNameList: '',
    });
  }

  submitHandler() {
    this.setState({ isLoading: ' is-loading' });
  }

  errorHandler() {
    this.setState({ isLoading: '' });
  }

  finishUpHandler() {
    this.setState({ isLoading: '' });
  }

  async getSalesCenters() {
    let url = '/app/salesCenters/';
    let res = await api.get(url, {
      start: 0,
      limit: 0,
      group: this.props.group.uuid,
    });
    this.setState({
      salesCenters: res.data,
    });
  }

  async getChannels() {
    let url = '/app/channels/';
    let res = await api.get(url, {
      start: 0,
      limit: 0,
      group: this.props.group.uuid,
    });
    this.setState({
      channels: res.data,
    });
  }

  render() {
    if (this.state.notFound) {
<<<<<<< HEAD
      return <NotFound msg={this.formatTitle('groups.notFound')} />
=======
      return <NotFound msg="este grupo" />;
>>>>>>> release
    }

    const { group } = this.state;

    if (!group.uuid) {
      return <Loader />;
    }
    var deleteButton;
    if (
      currentRole !== 'consultor-level-3' &&
      currentRole !== 'consultor-level-2'
    ) {
      deleteButton = (
        <div className="columns">
          <div className="column has-text-right">
            <div className="field is-grouped is-grouped-right">
              <div className="control">
                <DeleteButton
<<<<<<< HEAD
                  objectName={this.formatTitle('groups.deleteTitle')}
                  objectDelete={this.deleteObject.bind(this)}
                  message={`${this.formatTitle('groups.deleteMsg')} ${group.name}?`}
=======
                  titleButton={'Eliminar'}
                  objectName="Grupo"
                  objectDelete={this.deleteObject.bind(this)}
                  message={`¿Está seguro que desea eliminar el grupo ${
                    group.name
                  }?`}
>>>>>>> release
                />
              </div>
            </div>
          </div>
        </div>
      );
    }
    return (
      <div className="detail-page">
        <div className="level">
          <div className="level-left">
            <div className="level-item">
              <Breadcrumb
                path={[
                  {
                    path: '/',
<<<<<<< HEAD
                    label: this.formatTitle('groups.breadcrumbStart'),
                    current: false
=======
                    label: 'Inicio',
                    current: false,
>>>>>>> release
                  },
                  {
                    path: '/manage/groups',
                    label: this.formatTitle('groups.breadcrumbGroups'),
                    current: false,
                    onclick: e => {
                      e.preventDefault();
                      this.props.selectGroup();
                    },
                  },
                  {
                    path: '/manage/groups',
<<<<<<< HEAD
                    label: this.formatTitle('groups.breadcrumbDetail'),
                    current: true
=======
                    label: 'Detalle',
                    current: true,
>>>>>>> release
                  },
                  {
                    path: '/manage/groups/',
                    label: group.name,
                    current: true,
                  },
                ]}
                align="left"
              />
            </div>
          </div>
          <div className="level-right">
            <div className="level-item">
              <a
<<<<<<< HEAD
                className='button is-info'
                onClick={() => { this.props.selectGroup() }}
              >
                <FormattedMessage
                  id="groups.btnBack"
                  defaultMessage={`Regresar`}
                />
=======
                className="button is-info"
                onClick={() => {
                  this.props.selectGroup();
                }}
              >
                Regresar
>>>>>>> release
              </a>
            </div>
            <div className="level-item">{deleteButton}</div>
          </div>
        </div>

<<<<<<< HEAD
        <div className='section is-paddingless-top pad-sides'>

          <div className='columns'>
            <div className='column'>
              <div className='card'>
                <header className='card-header'>
                  <p className='card-header-title'>
                    <FormattedMessage
                      id="groups.detail"
                      defaultMessage={`Detalle`}
                    />
                  </p>
=======
        <div className="section is-paddingless-top pad-sides">
          <div className="columns">
            <div className="column">
              <div className="card">
                <header className="card-header">
                  <p className="card-header-title">Detalle</p>
>>>>>>> release
                </header>
                <div className="card-content">
                  <div className="columns">
                    <div className="column">
                      <GroupForm
                        baseUrl="/app/groups"
                        url={'/app/groups/' + this.props.group.uuid}
                        initialState={{
                          ...this.state.group,
                          organization: this.state.group.organization._id,
                        }}
                        load={this.load.bind(this)}
                        submitHandler={data => this.submitHandler(data)}
                        errorHandler={data => this.errorHandler(data)}
                        finishUp={data => this.finishUpHandler(data)}
                        canEdit={
                          currentRole !== 'consultor-level-3' &&
                          currentRole !== 'consultor-level-2'
                        }
                        canCreate={
                          currentRole !== 'consultor-level-3' &&
                          currentRole !== 'consultor-level-2'
                        }
                      >
<<<<<<< HEAD

                        {
                          this.state.catalogItems &&
                          this.state.catalogItems.length > 0 &&
                          this.state.catalogItems.map(item => {
                            return (
                              <div className='has-20-margin-top' key={item.slug}>
                                <p className='label'>{this.formatTitle('catalogs.' + item.slug)}</p>
                                <div className='tags'>
                                  {item.objects.map((obj) => {
=======
                        {this.state.catalogItems &&
                          this.state.catalogItems.length > 0 &&
                          this.state.catalogItems.map(item => {
                            return (
                              <div
                                className="has-20-margin-top"
                                key={item.type}
                              >
                                <p className="label">{item.type}</p>
                                <div className="tags">
                                  {item.objects.map(obj => {
>>>>>>> release
                                    return (
                                      <Link
                                        className="tag is-capitalized"
                                        key={obj.uuid}
                                        to={
                                          '/catalogs/' +
                                          obj.type +
                                          '/' +
                                          obj.uuid
                                        }
                                      >
                                        {obj.name}
                                      </Link>
                                    );
                                  })}
                                </div>
                              </div>
<<<<<<< HEAD
                            )
                          })

                        }
                        {currentRole !== 'consultor-level-2' &&
                        <div className='field is-grouped has-20-margin-top'>
                          <div className='control'>
                            <button
                              className={'button is-primary ' + this.state.isLoading}
                              disabled={!!this.state.isLoading}
                              type='submit'
                            >
                              <FormattedMessage
                                id="groups.btnSave"
                                defaultMessage={`Guardar`}
                              />
                            </button>
=======
                            );
                          })}
                        {currentRole !== 'consultor-level-2' && (
                          <div className="field is-grouped has-20-margin-top">
                            <div className="control">
                              <button
                                className={
                                  'button is-primary ' + this.state.isLoading
                                }
                                disabled={!!this.state.isLoading}
                                type="submit"
                              >
                                Guardar
                              </button>
                            </div>
>>>>>>> release
                          </div>
                        )}
                      </GroupForm>
                    </div>
                  </div>
                </div>
              </div>
            </div>
<<<<<<< HEAD
            <div className='column'>
              <div className='card'>
                <header className='card-header'>
                  <p className='card-header-title'>
                    <FormattedMessage
                      id="groups.users"
                      defaultMessage={`Usuarios`}
                    />
                  </p>
                  {currentRole !== 'consultor-level-2' &&

                  <div className='card-header-select'>
                    <button className='button is-primary' onClick={() => this.showModalList()}>
                      <FormattedMessage
                        id="groups.btnAdd"
                        defaultMessage={`Agregar`}
                      />
                    </button>
                    <BaseModal
                      title={this.formatTitle('groups.assignUsers')}
                      className={this.state.classNameList}
                      finishUp={this.finishUpList.bind(this)}
                      hideModal={this.hideModalList.bind(this)}
                    >
                      <BranchedPaginatedTable
                        branchName='usersAsign'
                        baseUrl='/app/users'
                        columns={this.getColumnsUsersToAsign()}
                        filters={{groupAsign: this.props.group.uuid, organization: group.organization.uuid}}
                      />
                    </BaseModal>

                  </div>
                  }
                  {currentRole !== 'consultor-level-2' &&

                  <div className='card-header-select'>
                    <button className='button is-primary' onClick={() => this.showModal()}>
                      <FormattedMessage
                        id="groups.btnNewUser"
                        defaultMessage={`Nuevo usuario`}
                      />
                    </button>
                    <CreateUser
                      className={this.state.className}
                      finishUp={this.finishUp.bind(this)}
                      hideModal={this.hideModal.bind(this)}
                      branchName='users'
                      baseUrl='/app/users'
                      url='/app/users/'
                      filters={{group: this.props.group.uuid}}
                      organization={group.organization._id}
                    />
                  </div>
                  }
=======
            <div className="column">
              <div className="card">
                <header className="card-header">
                  <p className="card-header-title">Usuarios</p>
                  {currentRole !== 'consultor-level-2' && (
                    <div className="card-header-select">
                      <button
                        className="button is-primary"
                        onClick={() => this.showModalList()}
                      >
                        Agregar
                      </button>
                      <BaseModal
                        title="Usuarios para asignar"
                        className={this.state.classNameList}
                        finishUp={this.finishUpList.bind(this)}
                        hideModal={this.hideModalList.bind(this)}
                      >
                        <BranchedPaginatedTable
                          branchName="usersAsign"
                          baseUrl="/app/users"
                          columns={this.getColumnsUsersToAsign()}
                          filters={{
                            groupAsign: this.props.group.uuid,
                            organization: group.organization.uuid,
                          }}
                        />
                      </BaseModal>
                    </div>
                  )}
                  {currentRole !== 'consultor-level-2' && (
                    <div className="card-header-select">
                      <button
                        className="button is-primary"
                        onClick={() => this.showModal()}
                      >
                        Nuevo usuario
                      </button>
                      <CreateUser
                        className={this.state.className}
                        finishUp={this.finishUp.bind(this)}
                        hideModal={this.hideModal.bind(this)}
                        branchName="users"
                        baseUrl="/app/users"
                        url="/app/users/"
                        filters={{ group: this.props.group.uuid }}
                        organization={group.organization._id}
                      />
                    </div>
                  )}
>>>>>>> release
                </header>
                <div className="card-content">
                  <div className="columns">
                    <div className="column">
                      <BranchedPaginatedTable
                        branchName="users"
                        baseUrl="/app/users"
                        columns={this.getColumns()}
<<<<<<< HEAD
                        filters={{group: this.props.group.uuid}}
=======
                        filters={{ group: this.props.group.uuid }}
>>>>>>> release
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

<<<<<<< HEAD
export default injectIntl(GroupDetail)
=======
export default GroupDetail;
>>>>>>> release
